1717102347
ac1e01bd81d25a49725bc38f4603e687-phpdoc%3A5e5747c893e6c59ed76cf8fbc2509bc4-6f13fd4db160364d0737f1b66974d39f
s:16940:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:20:"Validation des frais";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:13:"PHP Version 8";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:4:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:8:"category";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:3:"PPE";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"package";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:3:"GSB";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:2;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Author":4:{s:7:" * name";s:6:"author";s:14:" * description";N;s:57:" phpDocumentor\Reflection\DocBlock\Tags\Author authorName";s:16:"Arthur Demoisson";s:58:" phpDocumentor\Reflection\DocBlock\Tags\Author authorEmail";s:0:"";}i:3;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Author":4:{s:7:" * name";s:6:"author";s:14:" * description";N;s:57:" phpDocumentor\Reflection\DocBlock\Tags\Author authorName";s:18:"Annabelle Hantrais";s:58:" phpDocumentor\Reflection\DocBlock\Tags\Author authorEmail";s:0:"";}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"6f13fd4db160364d0737f1b66974d39f";s:39:" phpDocumentor\Reflection\Php\File name";s:18:"c_validerFrais.php";s:39:" phpDocumentor\Reflection\Php\File path";s:34:"src/Controleurs/c_validerFrais.php";s:41:" phpDocumentor\Reflection\Php\File source";s:9765:"<?php

/**
 * Validation des frais
 *
 * PHP Version 8
 *
 * @category  PPE
 * @package   GSB
 * @author    Arthur Demoisson
 * @author    Annabelle Hantrais
 * 
 */

use Outils\Utilitaires;

$action = filter_input(INPUT_GET, 'action', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
$idUtilisateur = $_SESSION['idUtilisateur'];
$role = $_SESSION['role'];

switch ($action) {
    case 'selectionnerVisiteur':
        $lesVisiteurs = $pdo->getNomsVisiteurs();
        include PATH_VIEWS . 'v_listeVisiteurs.php';
        
    break;

    case 'selectionnerMois':
        $idVisiteur = filter_input(INPUT_POST, 'lstVisiteurs', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        $lesMois = $pdo->getLesMoisCloturesDisponibles($idVisiteur);
        $lesVisiteurs = $pdo->getNomsVisiteurs();
        include PATH_VIEWS . 'v_listeMoisComptable.php';
        
    break;

    case 'voirEtatFrais':
       //menu déroulant visiteurs:
        $lesVisiteurs = $pdo->getNomsVisiteurs();
        $idVisiteur = filter_input(INPUT_POST, 'lstVisiteurs', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        $_SESSION['idVisiteur'] = $idVisiteur;
        $_SESSION['montantFicheFrais'] = 0;
        $prixKm=$pdo->getFraisKmByVisiteur($idVisiteur);

        //menu déroulant mois:
        $leMois = filter_input(INPUT_POST, 'lstMois', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        $_SESSION['leMois'] = $leMois;
        $lesMois = $pdo->getLesMoisCloturesDisponibles($idVisiteur);
        include PATH_VIEWS . 'v_listeMoisComptable.php';

        $lesInfosFicheFrais = $pdo->getLesInfosFicheFrais($idVisiteur, $leMois);
        if(!$lesInfosFicheFrais){
            Utilitaires::ajouterErreur("Aucune fiche de frais n'est à valider pour ce visiteur. Veuillez-en choisir un autre");
            include PATH_VIEWS . 'v_erreurs.php';
        }
        else{
            $numAnnee = substr($leMois, 0, 4);
            $numMois = substr($leMois, 4, 2);
            $libEtat = $lesInfosFicheFrais['libEtat'];
            $montantValide = $lesInfosFicheFrais['montantValide'];
            $nbJustificatifs = $lesInfosFicheFrais['nbJustificatifs'];
            $dateModif = Utilitaires::dateAnglaisVersFrancais($lesInfosFicheFrais['dateModif']);
            $lesFraisHorsForfait = $pdo->getLesFraisHorsForfait($idVisiteur, $leMois);
            $lesFraisForfait = $pdo->getLesFraisForfait($idVisiteur, $leMois);
            require PATH_VIEWS . 'v_listeFraisForfait.php';
            require PATH_VIEWS . 'v_listeFraisHorsForfait.php';    
        }
    break;
    
    case 'majFraisHorsForfait':
        $idFrais = filter_input(INPUT_GET, 'id', FILTER_SANITIZE_FULL_SPECIAL_CHARS);

        $lesLibelles = filter_input(INPUT_POST, 'lesLibelles', FILTER_DEFAULT, FILTER_FORCE_ARRAY);
        $lesDates = filter_input(INPUT_POST, 'lesDates', FILTER_DEFAULT, FILTER_FORCE_ARRAY);
        $lesMontants = filter_input(INPUT_POST, 'lesMontants', FILTER_DEFAULT, FILTER_FORCE_ARRAY);
        $libelle = $lesLibelles[$idFrais];
        $date = $lesDates[$idFrais];
        $montant = $lesMontants[$idFrais];
        $idVisiteur = $_SESSION['idVisiteur'];
        $leMois = $_SESSION['leMois'];
        $prixKm=$pdo->getFraisKmByVisiteur($idVisiteur);

        $pdo->majFraisHorsForfait($idVisiteur, $leMois, $libelle, $date, $montant, $idFrais);
        
        $lesFraisHorsForfait = $pdo->getLesFraisHorsForfait($idVisiteur, $leMois);
        $lesVisiteurs = $pdo->getNomsVisiteurs();
        $lesMois = $pdo->getLesMoisCloturesDisponibles($idVisiteur);
        include PATH_VIEWS . 'v_listeMoisComptable.php';
        
        $lesInfosFicheFrais = $pdo->getLesInfosFicheFrais($idVisiteur, $leMois);
     
        
        if(!$lesInfosFicheFrais){
            Utilitaires::ajouterErreur("Aucune fiche de frais n'est à valider pour ce visiteur. Veuillez-en choisir un autre");
            include PATH_VIEWS . 'v_erreurs.php';
        }
        else{
            $numAnnee = substr($leMois, 0, 4);
            $numMois = substr($leMois, 4, 2);
            $libEtat = $lesInfosFicheFrais['libEtat'];
            $montantValide = $lesInfosFicheFrais['montantValide'];
            $nbJustificatifs = $lesInfosFicheFrais['nbJustificatifs'];
            $dateModif = Utilitaires::dateAnglaisVersFrancais($lesInfosFicheFrais['dateModif']);
            $lesFraisHorsForfait = $pdo->getLesFraisHorsForfait($idVisiteur, $leMois);
            $lesFraisForfait = $pdo->getLesFraisForfait($idVisiteur, $leMois);
            require PATH_VIEWS . 'v_listeFraisForfait.php';
            require PATH_VIEWS . 'v_listeFraisHorsForfait.php';
            ?>
            <script>alert("<?php echo htmlspecialchars('Votre fiche de frais a bien été corrigée ! ', ENT_QUOTES); ?>")</script>
            <?php
        }
       
        
    break;
    
    case 'refuserOuReporter':
        
        $idFrais = filter_input(INPUT_GET, 'idFrais', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        $idVisiteur = $_SESSION['idVisiteur'];
        $leMois = $_SESSION['leMois'];
        $montant=$_SESSION['montantFicheFrais'];
        
         echo ' 
        <div class="alert alert-warning" role="alert">
         <p><h4>Voulez vous refuser ou reporter le frais?<br></h4>
         <a href="index.php?uc=validerFrais&action=refuser&idFrais=' .$idFrais .'">refuser</a>  ou '
        . '<a href="index.php?uc=validerFrais&action=reporter&idFrais=' . $idFrais 
        .'&montant=' .$montant .'&mois=' .$leMois .
        '">reporter</a>
       </div> ';
        
        
    break;
    
    
    
    case 'refuser':
   
        $idFrais = intval(filter_input(INPUT_GET, 'idFrais', FILTER_SANITIZE_NUMBER_INT));

        $pdo->refuserFraisHorsForfait($idFrais);
        
        echo '<div class="alert alert-warning" role="alert">
              <p> Le frais hors forfait sélectionné à été refusé. <a href = "index.php?uc=validerFrais&action=voirEtatFrais">Cliquez ici</a>
                pour revenir à la selection.</p>
            </div> ';


    break;
        
    case 'validerMajFraisForfait':
        $lesFrais = filter_input(INPUT_POST, 'lesFrais', FILTER_DEFAULT, FILTER_FORCE_ARRAY);
        //récupérer le mois à afficher et l'id du visiteur
        $idVisiteur = $_SESSION['idVisiteur'] ;
        $leMois = $_SESSION['leMois'];
        $prixKm=$pdo->getFraisKmByVisiteur($idVisiteur);
        if (Utilitaires::lesQteFraisValidesNombre($lesFrais)) {
            //modifier les frais:
            $pdo->majFraisForfait($idVisiteur, $leMois, $lesFrais);
            
            //puis recharger la page : 
            $lesFraisHorsForfait = $pdo->getLesFraisHorsForfait($idVisiteur, $leMois);
            $lesFraisForfait = $pdo->getLesFraisForfait($idVisiteur, $leMois);
            $lesVisiteurs = $pdo->getNomsVisiteurs();
            $lesMois = $pdo->getLesMoisCloturesDisponibles($idVisiteur);  
            $nbJustificatifs = $pdo->getNbjustificatifs($idVisiteur, $leMois);
            $actionBtnsHF= ($role=='Comptable') ?'<button class="btn btn-success" type="submit">Corriger</button><button class="btn btn-danger" type="reset">Réinitialiser</button>' : 'supprimer';
            include PATH_VIEWS . 'v_listeMoisComptable.php';
            require PATH_VIEWS . 'v_listeFraisForfait.php';
            require PATH_VIEWS . 'v_listeFraisHorsForfait.php';
            ?>
            <script>alert("<?php echo htmlspecialchars('Votre fiche de frais a bien été corrigée ! ', ENT_QUOTES); ?>")</script>
            <?php
        } else {
            Utilitaires::ajouterErreur('Les valeurs des frais doivent être numériques');
            include PATH_VIEWS . 'v_erreurs.php';
        }
    break;
    

    case 'reporter':

        $idVisiteur = $_SESSION['idVisiteur'];
        $idFrais = filter_input(INPUT_GET, 'idFrais', FILTER_SANITIZE_NUMBER_INT);
        $leMois = filter_input(INPUT_GET, 'mois', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        //    $montant = filter_input(INPUT_GET, 'montant', FILTER_SANITIZE_NUMBER_INT);
        //    $mois = filter_input(INPUT_GET, 'mois', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    
        $moisSuivant = Utilitaires::getMoisSuivant($leMois);

        if ($pdo->estPremierFraisMois($idVisiteur, $moisSuivant)) {
          $pdo->creeNouvellesLignesFrais($idVisiteur, $moisSuivant);
        }
        $moisReporter = $pdo->reporterFraisHF($idFrais, $leMois);

            echo '<div class="alert alert-warning" role="alert">
              <p> Le frais hors forfait sélectionné à été reporté au mois suivant. <a href = "index.php?uc=validerFrais&action=voirEtatFrais">Cliquez ici</a>
                pour revenir à la selection.</p>
            </div> ';

	
    break;

    case 'validerFicheFrais':
        //recup FicheFrais
        $idVisiteur = $_SESSION['idVisiteur'];
        $leMois = $_SESSION['leMois'];
        $lesInfosFicheFrais = $pdo->getLesInfosFicheFrais($idVisiteur, $leMois);       
        // mettre à jour le montantValide de la fiche de frais (somme des montants forfait et hors forfait)
        $montantValide = $_SESSION['montantFicheFrais'];
        $pdo->majMontantValideFicheFrais($idVisiteur,$leMois,$montantValide);
        //mettre à jour l'état à 'VA':
        $idEtat='VA';
        $pdo->majEtatFicheFrais($idVisiteur, $leMois, $idEtat);  
         echo '<div class="alert alert-warning" role="alert">
      <p> La fiche de frais à été validée. <a href = "index.php?uc=validerFrais&action=voirEtatFrais">Cliquez ici</a>
        pour revenir à la selection.</p>
    </div> ';
    
    break;
           
}";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";